"use strict";

// Defining some variables
var _scroll, _wresize, _mobile;

var _window = $(window);

var _document = $(document);

var _body = $('body');

var _tablet = 1020;

var _navigationWrapper = $('.navWrapper');

var _navigationWrapperMobile = $('.slicknav_menu');

var _singleNavigationContainer = $('.sf-simple-nav-container');

var _singleNavigation = '.sf-simple-nav';

var _dropdownLayout = _navigationWrapper.find('.navItemLayout');

var _dropdownLayoutMobile = _navigationWrapperMobile.find('.navItemLayout');

var _navigation = $('#navigationToScrape'); //$('header .navigation');


var _mobileHeaderNavContainer = $('#sf-main-header');

var _navigationPos = _navigation.offset().top; // The navigation position


var _once = true;
var _time = 600;
var _init = false;

var _show, _go; // Timeout variables


var mainNavigation = {
  desktopNav: function desktopNav() {
    /* Contains:
    * - generate desktop and mobile main nav parent links [1]
    * - hide default parent links in navParent section on init [2]
    * - hide navParent section on init [3]
    * - generated mobile navigation markup [4]: supported navigation vertical template, content block and news list
    * - hide generated mobile navigation markup [5]
    * - Events:
    * -- prevent default behavior of the link if there is dropdown container
    * -- desktop parent click function if there is a dropdown container
    * */
    var _this = this;

    _navigationWrapper.each(function () {
      if (!$('.mainnav_overlay').length) {
        $('body').prepend('<div class="mainnav_overlay"></div>');
      }
      /* navParent sections: [Helper]
      * - Navigation widget can be configured incorrectly by including more then one link so use always first item
      * - Use navigation Horizontal template
      * - Select one parent link with no children elements
      * */


      var thisNavigationWrapper = $(this),
          parentLinkCounter = 0,
          navigationUL = thisNavigationWrapper.find('ul.nav'),
          navigationULMobile = thisNavigationWrapper.find('ul.nav-mobile'),
          navParentLinkContainer = thisNavigationWrapper.find('.navParent'),
          navParentLinks = thisNavigationWrapper.find('.navParent ul li:first-child'); // [Helper]
      // generate desktop and mobile main nav parent links

      navParentLinks.each(function () {
        if ($(this).closest('.navHomeItemLayout').length) {
          navigationUL.append($(this).addClass('home'));
          navigationULMobile.append($(this).addClass('home').clone());
        } else {
          navigationUL.append($(this));
          navigationULMobile.append($(this).clone());
        }

        parentLinkCounter++;
      }); // hide default parent links on init

      navParentLinkContainer.addClass('desktopHidden');
      navParentLinkContainer.each(function (k, v) {
        if (_this.isEmpty($(v).find('li'))) {
          $(v).hide();
        }

        $(this).attr('data-offset', $(this).offset().top - 100);
      }); // hide navParent section on init

      navParentLinkContainer.hide(); // generated mobile navigation markup

      navigationULMobile.find('li').each(function () {
        var self = $(this),
            dropdown = thisNavigationWrapper.find('.navItemLayout').eq($(this).index()).find('.navDropdown');

        if (_this.existDrodpown(thisNavigationWrapper, self)) {
          // Go through all ul-s
          dropdown.find('ul').each(function () {
            var children = $(this);

            if (children.hasClass('main-navigation') || children.hasClass('navVertical')) {
              // default
              self.append(children.find('> li').clone());
            } else if (children.closest('.content-block').length > 0 && children.closest('.horizontal').length === 0) {
              // News list
              self.append(children.find('> li').clone());
              var newsItem = children.closest('.content-block').parent().find('.vertical-list-item a').parent(),
                  lastChildren = self.find('> li').last();
              newsItem.each(function () {
                var newsLink = $(this).clone().html();
                lastChildren.append('<li>' + newsLink + '</li>');
              });
              lastChildren.find('> li').wrapAll('<ul class="sub-level"></ul>');
            } else if (children.closest('.horizontal').length > 0) {
              // Horizontal
              // Structure of the menu:

              /*
              * - A-Z header [1]
              * - A
              * - B
              * - etc.
              * */
              // First item is a nav parent link [1]
              // Hide first child element with css
              self.append(children.find('> li').first().clone()); // first item in the list

              var lastChildren = self.find('> li').last(),
                  all = children.clone().html();
              lastChildren.append("<ul class='horizontal-menu'>" + all + "</ul>");
            } else {//console.log('Not supported widget');
            }
          });
          self.find('> li').wrapAll('<ul></ul>');
        }
      }); // hide generated mobile navigation markup

      navigationULMobile.hide(); // Events
      // prevent default behavior of the link

      navigationUL.find('li a').on('click', function (e) {
        var self = $(this),
            dropdown = thisNavigationWrapper.find('.navItemLayout').eq($(this).closest('li').index()).find('.navDropdown');

        if (!_this.isEmpty(dropdown)) {
          e.preventDefault();
        }
      }); // desktop parent click function if there is a dropdown container

      navigationUL.find('li').on('click', function (e) {
        var self = $(this);
        var drodownLayout = thisNavigationWrapper.find('.navItemLayout'),
            dropdownLayoutCurrent = drodownLayout.eq(self.index());

        if (_this.existDrodpown(thisNavigationWrapper, self)) {
          if (self.hasClass('open')) {
            navigationUL.find('.open').removeClass('open');
            drodownLayout.slideUp();
            drodownLayout.removeClass('navItemLayoutOpened');

            _body.removeClass('mainnav_overlay-visible');
          } else {
            navigationUL.find('.open').removeClass('open');
            drodownLayout.slideUp();
            drodownLayout.removeClass('navItemLayoutOpened');

            _body.removeClass('mainnav_overlay-visible');

            self.addClass('open');
            dropdownLayoutCurrent.slideDown();
            dropdownLayoutCurrent.addClass('navItemLayoutOpened');

            _body.addClass('mainnav_overlay-visible');

            $('.navItemLayoutOpened img.lazy').lazy({
              bind: "event",
              delay: 0
            });
          }
        } else {
          navigationUL.find('.open').removeClass('open');
          drodownLayout.slideUp();
          drodownLayout.removeClass('navItemLayoutOpened');

          _body.removeClass('mainnav_overlay-visible');
        }
      });
    }); // On resize close dropdown


    _window.on('resize', function () {
      if ($(this).width() < _tablet) {
        _dropdownLayout.slideUp();

        _dropdownLayout.removeClass('navItemLayoutOpened');

        _navigationWrapper.find('.open').removeClass('open');

        _body.removeClass('mainnav_overlay-visible');
      }
    }); // On click some HT letter close dropdown


    $('.navWrapper .navItemLayout .horizontal ul li').on('click', function (e) {
      $('.navItemLayout').slideUp();
      $('.navItemLayout').removeClass('navItemLayoutOpened');
      $('#navigationToScrape').find('.open').removeClass('open');

      _body.removeClass('mainnav_overlay-visible');
    });
  },
  isEmpty: function isEmpty(element) {
    return !$.trim(element.html());
  },
  outsideClickListener: function outsideClickListener(selector, visibleSelector) {
    _document.on('click touchstart', function (e) {
      if (!selector.is(e.target) && selector.has(e.target).length === 0) {
        if (visibleSelector.is(':visible')) {
          visibleSelector.slideUp();
          visibleSelector.removeClass('navItemLayoutOpened');
          selector.find('.open').removeClass('open');

          _body.removeClass('mainnav_overlay-visible');
        }
      }
    });
  },
  outsideClickListenerOnMobile: function outsideClickListenerOnMobile() {
    var container = $('.slicknav_menu');
    $(document).on('click touchstart', function (e) {
      if (!container.is(e.target) && container.has(e.target).length === 0 && !$(e.target).hasClass('slicknav_btn') && !$(e.target).closest('div.slicknav_menu').length > 0) {
        $('.nav-mobile').slicknav('close');
      }
    });
  },
  existDrodpown: function existDrodpown(thisElement, selectedDropdownLayout) {
    var _this = this;

    var dropdown = thisElement.find('.navItemLayout').eq(selectedDropdownLayout.index()).find('.navDropdown');

    if (!_this.isEmpty(dropdown)) {
      return true;
    }

    return false;
  },
  svgFillColor: function svgFillColor() {
    $('img.svg').each(function () {
      var $img = $(this);
      var imgID = $img.attr('id');
      var imgClass = $img.attr('class');
      var imgURL = $img.attr('src');

      if (typeof imgURL !== 'undefined') {
        $.get(imgURL, function (data) {
          // Get the SVG tag, ignore the rest
          var $svg = $(data).find('svg'); // Add replaced image's ID to the new SVG

          if (typeof imgID !== 'undefined') {
            $svg = $svg.attr('id', imgID);
          } // Add replaced image's classes to the new SVG


          if (typeof imgClass !== 'undefined') {
            $svg = $svg.attr('class', imgClass + ' replaced-svg');
          } // Remove any invalid XML tags as per http://validator.w3.org


          $svg = $svg.removeAttr('xmlns:a'); // Check if the viewport is set, if the viewport is not set the SVG wont't scale.

          if (!$svg.attr('viewBox') && $svg.attr('height') && $svg.attr('width')) {
            $svg.attr('viewBox', '0 0 ' + $svg.attr('height') + ' ' + $svg.attr('width'));
          } // Replace image with new SVG


          $img.replaceWith($svg);
        }, 'xml');
      }
    });
  },
  scroll: function scroll() {
    // A scroll function!     
    // Get the scroll position
    var _scrollPos = _document.scrollTop(); // So if the scroll position is more than the nav position..


    if (_scrollPos > _navigationPos) {
      // The scrolling has initiated so set init to true
      _init = true; // This is so we only run the animation once, rather than after every scroll event

      if (_once === true) {
        _once = false;
      } // Finally, add the attached class so the nav sticks to
      // the top of the page


      _navigation.addClass('attached'); // Else the user is scrolling back up past the nav.

    } else if (_init === true) {
      // And remove the class attached.
      _navigation.removeClass('attached'); // We reset once so that the animation can run again should the user scroll back
      // down past the nav


      _once = true;
      _init = false;
    }
  },
  desktopNavSticky: function desktopNavSticky() {
    var self = this; // Append logo to the home link 

    var logo = $('.header-logo .logo');

    var homeLink = _navigation.find('.navWrapper .home a');

    if (_navigation.find('.navWrapper .home .logo').length < 1) {
      logo.clone().appendTo(homeLink);
      self.svgFillColor();
    } // If the user touches the screen it is obviously a mobile device. This lets us disable any animations 
    // for mobile users.


    window.addEventListener('touchstart', function () {
      _mobile = true;
    }); // Then finally run the scroll and psize functions on scroll and resize.

    _document.scroll(self.scroll); // _window.on(_tablet);


    _window.on('resize', function () {
      if ($(this).width < _tablet) {
        console.log(_mobile); // Only action on screen width change

        _mobile = true;
      }
    });
  },
  slickNav: function slickNav() {
    if ($.fn.slicknav !== undefined) {
      var slicknavOpened = function slicknavOpened(trigger) {
        var $trigger = $(trigger[0]);

        if ($trigger.hasClass('slicknav_btn')) {
          return;
        }

        var $liParent = $trigger.parent();
        var $ulParent = $liParent.parent();
        $ulParent.children().each(function () {
          var $child = $(this);

          if ($child.is($liParent)) {
            return;
          }

          if ($child.hasClass('slicknav_collapsed')) {
            return;
          }

          if (!$child.hasClass('slicknav_open')) {
            return;
          }

          var $anchor = $child.children().first();

          if (!$anchor.hasClass('slicknav_item')) {
            return;
          }

          $anchor.click();
        });
      };

      var currWrapper = _navigationWrapper;
      var mobileNavigation = '.nav-mobile';

      if (_singleNavigationContainer.length) {
        currWrapper = _singleNavigationContainer;
        mobileNavigation = _singleNavigation;
      }

      currWrapper.each(function () {
        var self = $(this),
            mobileNav = self.find(mobileNavigation);

        if (!$('.slicknav_overlay').length) {
          $('body').prepend('<div class="slicknav_overlay"></div>');
        }

        mobileNav.slicknav({
          appendTo: '#sf-main-header .container > .row .col-md-12',
          label: '',
          allowParentLinks: "true",
          closedSymbol: '',
          openedSymbol: '',
          beforeOpen: function beforeOpen(trigger) {
            slicknavOpened(trigger);
            $('body').addClass('noscroll');
          },
          afterOpen: function afterOpen(trigger) {
            $('.slicknav_overlay').addClass("visible");
            $('.slicknav_overlay').animate({
              opacity: "1"
            }, 100);

            if ($(trigger).hasClass('slicknav_btn')) {
              $('.slicknav_menu').addClass('open-menu');
            }
          },
          afterClose: function afterClose(trigger) {
            if (!$('.slicknav_btn').hasClass('slicknav_open')) {
              $('.slicknav_overlay').removeClass("visible");
              $('.slicknav_overlay').animate({
                opacity: "0"
              }, 100);
              $('body').removeClass('noscroll');
              $('.slicknav_menu').removeClass('open-menu');
            }
          }
        });
      }); //$(window).scroll(function () {
      //    var scroll = $(window).scrollTop();
      //    if (scroll >= 78) {
      //        $(".slicknav_overlay").addClass("scrolled");
      //    } else {
      //        $(".slicknav_overlay").removeClass("scrolled");
      //    }
      //});
      // append language selector to the main nav on mobile

      var topHeader = $('.top-header'),
          langSelector = topHeader.find('.sf-lang-selector'),
          langSelectorCurrent = langSelector.find('.selected'),
          socialShareHeader = $('section.content').find('.follow-us--header');

      if (socialShareHeader.length != "") {
        _mobileHeaderNavContainer.find('.slicknav_nav').append('<li class="slicknav_addition follow-us--header slicknav_collapsed slicknav_parent">' + '<ul class="slicknav_hidden">' + socialShareHeader.html() + '</ul></li>');
      }

      if (langSelectorCurrent.length != "") {
        _mobileHeaderNavContainer.find('.slicknav_nav').prepend('<li class="slicknav_addition sf-lang-selector slicknav_collapsed slicknav_parent">' + '<ul class="slicknav_hidden">' + langSelector.html() + '</ul></li>');

        var selected = $('.slicknav_addition.sf-lang-selector').find('.selected');
        selected.parent().addClass('selected');
      } //additional class for a-z filtering list


      if ($('.horizontal-menu').length != "") {
        var horizontalList = _mobileHeaderNavContainer.find('.slicknav_nav').find('.horizontal-menu').parent();

        horizontalList.addClass('horizontal-menu-list');
      } // append geo navigation to the main nav on mobile


      var geoNavigation = topHeader.find('#sf-geo-navigation-container');

      if (geoNavigation.length != "") {
        $('body').addClass("geo-navigation-exist");

        _mobileHeaderNavContainer.find('.slicknav_nav').prepend('<li class="slicknav_addition sf-geo-navigation-selector slicknav_collapsed slicknav_parent">' + '<ul class="slicknav_hidden">' + geoNavigation.html() + '</ul></li>');
      }

      $(document).on('click touchstart', function (e) {
        var nav = _mobileHeaderNavContainer.find(' .slicknav_menu');

        var navmenu = _mobileHeaderNavContainer.find(' .slicknav_nav');

        if (!nav.is(e.target) && nav.has(e.target).length === 0 && !navmenu.is(e.target) && navmenu.has(e.target).length === 0) {
          if (nav.is(":visible")) {
            $('.main-navigation').slicknav('close');
          }
        }
      });

      _window.on('resize', function () {
        if ($(this).width() > _tablet) {
          $('.main-navigation').slicknav('close');
          $('body').removeClass("noscroll");
        }
      });
    }
  },
  init: function init() {
    this.desktopNav();
    this.desktopNavSticky(); // Detect a click outside the taget element and close it

    this.outsideClickListener(_navigationWrapper, _dropdownLayout);
    this.outsideClickListenerOnMobile(); // Slick vendor script & init

    this.slickNav();
  }
};
$(function () {
  mainNavigation.init();
});
//# sourceMappingURL=main-navigation.min.js.map
