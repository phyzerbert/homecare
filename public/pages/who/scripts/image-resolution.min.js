"use strict";

var imageResolution = {
  imgResolution: function imgResolution() {
    var changeImage = function changeImage(prms) {
      //global variables set from outside:
      var imageRes = $('.thumb, .background-image');
      var defaultBgThumb = "1920v";
      var defaultBgThumbMedium = "1024v";
      var defaultBgThumbSmall = "768v";
      var defaultImgThumb = "768v";
      var params = {
        component: imageRes,
        resizeTimeout: 250
      }; //global variables set from inside:

      var global = {
        window: $(window),
        resizeTimer: {},
        resize: 'resize',
        dataAttribute: 'data-image'
      };
      var self = {};

      var getThumnbSize = function getThumnbSize(wWidth) {
        var sizeMap = [{
          key: 479,
          val: "479v"
        }, {
          key: 549,
          val: "549v"
        }, {
          key: 768,
          val: "768v"
        }, {
          key: 1024,
          val: "1024v"
        }, {
          key: 1366,
          val: "1366v"
        }, {
          key: 1920,
          val: "1920v"
        }];

        for (var i = 0; i < sizeMap.length; i++) {
          if (wWidth <= sizeMap[i].key) {
            return sizeMap[i].val;
          }
        }

        return "1366v";
      };

      self.init = function () {
        //init
        self.initImage(); //event listeners

        global.window.on(global.resize, function (e) {
          clearTimeout(global.resizeTimer);
          global.resizeTimer = setTimeout(function () {
            self.initImage();
          }, params.resizeTimeout);
        });
      }; //public methods


      self.initImage = function () {
        params.component.each(function () {
          var self = $(this);

          if ($(this).hasClass('thumb')) {
            if ($(this).find('img').length !== "") {
              var globalAttr = $(this).find('img').attr(global.dataAttribute);

              if (typeof globalAttr !== "undefined") {
                var src = globalAttr.replace(defaultBgThumb, getThumnbSize($(this).innerWidth()));
                $(this).find('img').attr('src', src);
              }
            }
          } else if ($(this).hasClass('background-image')) {
            var dataAttr = $(this).attr(global.dataAttribute);

            if (typeof dataAttr !== "undefined") {
              var newUrl = dataAttr.replace(defaultBgThumb, getThumnbSize($(this).innerWidth()));
              $(this).css('background-image', 'url(' + newUrl + ')');

              if ($(this).hasClass('background-image--medium')) {
                newUrl = dataAttr.replace(defaultBgThumbMedium, getThumnbSize($(this).innerWidth()));
                $(this).css('background-image', 'url(' + newUrl + ')');
              } else if ($(this).hasClass('background-image--small')) {
                newUrl = dataAttr.replace(defaultBgThumbSmall, getThumnbSize($(this).innerWidth()));
                $(this).css('background-image', 'url(' + newUrl + ')');
              }
            }
          }
        });
      };

      self.init();
      return self;
    };

    $('.thumb, .background-image').each(function (k, v) {
      changeImage({
        component: $(v)
      });
    });
  },
  init: function init() {
    this.imgResolution();
  }
};
$(function () {
  if (window.personalizationManager) {
    window.personalizationManager.addPersonalizedContentLoaded(function () {
      imageResolution.init();
    });
  } else {
    imageResolution.init();
  }
});
//# sourceMappingURL=image-resolution.min.js.map
